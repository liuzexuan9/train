//
//  main.cpp
//  point_cloud
//
//  Created by 刘泽轩 on 2020/4/30.
//  Copyright © 2020 刘泽轩. All rights reserved.
//

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <queue>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
vector<double> find_max_rect(vector<vector<double>> &data )
{
    const int direction=3;
    vector<double> max_rect=data[0];
    vector< double> min_rect=data[0];
    for(vector<double> x:data)
    {
        for(int i=0;i<direction;i++)
        
        {
            max_rect[i]=max(max_rect[i],x[i]);
            min_rect[i]=min(min_rect[i],x[i]);
        }
    }
    vector<double> ans(direction);
    for(int i=0;i<direction;i++)
        ans[i]=max_rect[i]-min_rect[i];
    return ans;
}
map<int,vector<vector<double>> >get_rect(vector<vector<double>> &datas,vector<double> max_rect,
                                        vector<double> rect_size)
{
    map<int,vector<vector<double>> > ans;
    int size[3];
    for(int i=0;i<3;i++)
    {
        size[i]=(int)(max_rect[i]/rect_size[i])+1;
    }
    int num=0;
    for(vector<double> data:datas)
    {
        num=(int)(data[0]/rect_size[0])*size[1]*size[2]+(int)(data[1]/rect_size[1])*size[2]+
        (int)(data[2]/rect_size[2]);
        ans[num].push_back(data);
    }
    
    
    return ans;
}
bool write_points_file(char *filename,vector<vector<double>> &data)
{
    FILE *fp=fopen(filename,"w");
    for(vector<double> x:data )
    {
        //fprintf(fp,"%f,%f,%f\n",x[0],x[1],x[2]);
        for(double y:x)
        {
            fprintf(fp,"%f,",y);
        }
        fprintf(fp,"\n");
    }
    return true;
}

vector<vector<double>> read_points_file(char *filename,const int each_len=3)
{
    FILE *fp=fopen(filename,"r");
    vector<vector<double>> ans;
    vector<double> t(each_len);
    while(!feof(fp))
    {
        
        
        for(int i=0;i<each_len;i++)
        {
            fscanf(fp,"%f",&t[i]);
        }
        ans.push_back(t);
        
    }
    return ans;
}
class points
{
private:
     int max_size=1024,dim=3;
    vector<vector<double>> p;//(max_size,vector<double>(dim));
    int len=0;
public:
    points(int size=1024,int dim=3)
    {
        p.resize(size);
        max_size=size;
        this->dim=dim;
    }
    void clear()
    {
        len=0;
    }
    bool write(vector<vector<double>> &data)
    {
        int n=data.size();
        if(n>=max_size) return false;
        
        for(int i=0;i<n;i++)
        {
            p[i]=data[i];
            len++;
        }
        return true;
    }
    bool write(vector<vector<double>> &data,int left,int right)
    {
       
        
        for(int i=left,j=0;i<right;i++,j++)
        {
            p[j]=data[i];
            len++;
        }
        return true;
    }
    
    
    
};
class memory
{
private:
    vector<points *> data;
    int mem_size;
    int size;
    queue<int> ack;
public:
    memory(int size=1024,int mem_size=1024)
    {
        this->mem_size=mem_size;
        for(int i=0;i<mem_size;i++)
            ack.push(i);
        this->size=size;
        for(int i=0;i<size;i++)
        {
            points *x=new points(size);
            data.push_back(x);
        }
    }
    points * get_data(int x)
    {
        if(x<0||x>=size) return NULL;
        return data[x];
    }
    vector<int> write_data(vector<vector<double>> &d)
    {
        int n=d.size();
        int m=(n+size-1)/size;
        vector<int> seq;
        if(ack.size()<m) return seq;
        for(int i=0;i<m;i++)
        {
            int loc=ack.front();
            seq.push_back(loc);
            ack.pop();
            points *p=data[i];
            p->write(d,i*size,(i+1)*size);
            
        }
        
        return seq;
        
        
    }
     void realease(vector<int> &seq)
    {
        for(int x:seq)
        {
            data[x]->clear();
            ack.push(x);
        }
    }
    
};
vector<vector<int>> get_next_2d(int x,int y,int n,int m)
{
    int dx[8]={-1,-1,-1,0,0,1,1,1};
    int dy[8]={-1,0,1,-1,1,-1,0,1};
    vector<int> t;
    vector<vector<int>> ans;
    for(int i=0;i<8;i++)
    {
        int tx=x+dx[i];
        int ty=y+dy[i];
        if(tx<0||ty<0||tx>=n||ty>=m)
            continue;
        t[0]=tx;
        t[1]=ty;
        ans.push_back(t);
    }
    return ans;
}
int main(int argc, const char * argv[]) {
    // insert code here...
   
    return 0;
}
