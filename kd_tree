//
//  main.cpp
//  knn
//
//  Created by 刘泽轩 on 2020/4/6.
//  Copyright © 2020 刘泽轩. All rights reserved.
//

#include <iostream>

#include <iostream>
#include <vector>
#include <math.h>
#include <random>
#include <queue>
#include <map>
using namespace std;
typedef struct tree{
    int dim;
    double div;
    struct tree *left;
    struct tree *right;
    
    
}Tree;

class kd_tree
{
private:
    int dim;
    vector<vector<double>> x;
      double get_mid_value(vector<double> &data,int left,int right,int target)
    {
        int n=data.size();
        int i=left,j=right;
       // int target=left+(right-left)/2;
        int temp=data[left];
        while(left<right)
        {
            while(left<right&data[right]>=temp) right--;
            if(left<right) data[left]=data[right];
            while(left<right&&data[left]<temp) left++;
            if(left<right) data[right]=data[left];
            
        }
        data[left]=temp;
        if(left==target) return data[left];
        else if(left<target) return get_mid_value(data, left+1,j,target );
        else return get_mid_value(data, i, left-1,target);
    }
public:
    kd_tree(vector<vector<double>>&data)
    {
        int n=data.size();
        int m=data[0].size();
        dim=m;
        x=data;
    }
        Tree * built_by_dim(vector<int>&seq,int d)
    {
        Tree *tree=new Tree();
        tree->dim=d%dim;
        vector<int> left,right;
        int n=seq.size();
        vector<double> temp(n);
        for(int i=0;i<n;i++)
        {
            temp[i]=x[seq[i]][d];
        }
        //得出中值
        int mid=seq.size()/2;
        int mid_value=get_mid_value(temp,0, n-1,mid);
        
        
        for(int i=0;i<n;i++)
        {
           //if(i==mid) continue;
            if(x[seq[i]][d]<=mid_value) left.push_back(i);
            else right.push_back(i);
        }
        tree->div=mid_value;
        tree->loc=mid;
        tree->left=built_by_dim(left,d+1);
        tree->right=built_by_dim(right,d+1);
        return tree;
    }

    
    vector<double>  search_nearest(Tree *root,vector<double>target)
    {
        vector<double> nearest_point=x[0];
        double d=dis(target,x[0]);
        stack<Tree *>st;
        Tree *node=root;
        st.push(node);
        while(node)
        {
           
            if(node->div<=target[node->dim])
            {
                st.push(node);
                node=node->left;
            }
            else
            {
                st.push(node);
                node=node->right;
            }
        }
        nearest_point=x[(st.top())->loc];
        st.pop();
        d=dis(nearest_point,target);
        
        //下面是回溯搜索路径
        while(!st.empty())
        {
            node=st.top();
            st.pop();
            int t=dis(x[node->loc],target);
            if(t>=d) break;
            //如果node现在指向的是叶子结点，则观察是否需要更新
            if(node->left==NULL&&node->right==NULL)
            {
                    d=t;
                    nearest_point=x[node->loc];
            }
            else{
                //现在观察target为中心，半径为d的超球面是否与分割超平面相交
                if(x[node->loc][node->dim]>target[node->dim])//可能在右搜索空间有更好的解，网右搜索
                {
                    node=node->right;
                }
                else node=node->left;
                if(node)
                    st.push(node);
                
            }
            
        }
        
        return nearest_point;
        
    }
};
int main(int argc, const char * argv[]) {
    // insert code here...
    std::cout << "Hello, World!\n";
    return 0;
}
